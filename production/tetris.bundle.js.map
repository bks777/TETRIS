{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./sources/game/GameField/GameFieldController.js","webpack:///./sources/game/EndRound.js","webpack:///./sources/game/Informers.js","webpack:///./sources/game/StateController.js","webpack:///./sources/game/AnimationsControls.js","webpack:///./sources/game/Cell.js","webpack:///./sources/game/Tetromino.js","webpack:///./sources/game/GameField/GameFieldView.js","webpack:///./sources/game/GameField/GameFieldAPI.js","webpack:///./sources/core/UserActionListener.js","webpack:///./sources/core/EventManager.js","webpack:///./sources/core/Loader.js","webpack:///./sources/core/GameRunner.js","webpack:///./sources/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GameFieldController","view","_classCallCheck","this","_on","_this","game","EventManager","subscribe","data","_userActions","checkTetraminoAdding","informers","updateScore","config","isDown","_data","animationsControls","moveLeft","moveRight","moveDelay","rotateTetromino","startNewRound","EndRound","buttonTexture","parent","callback","_possibleConstructorReturn","__proto__","getPrototypeOf","_callback","button","_initElements","position","set","x","y","addChild","PIXI","Container","back","Graphics","Sprite","label","Text","text","style","buttonText","beginFill","color","drawRect","width","height","alpha","mouseup","interactive","buttonMode","visible","Informers","respack","_score","nextContainer","scoreContainer","_scoreText","_tempTetraminos","_initNextData","_initScoreField","init_tetro_pull","updateNextTetrominos","anchor","tetroPull","length","forEach","tetramino","removeChild","_loop","tetroIdx","tempConfig","tempBlock","tempTetromino","Texture","EMPTY","row","rowId","column","colId","push","_generateTetrominos","isClear","StateController","statesArray","_currentState","legalStates","indexOf","Error","console","info","AnimationsControls","configuration","stateController","currentState","_cells","cells","_tetroPull","currentPositionX","currentPositionY","currentTime","_movingShape","_moveDelay","isGameOver","_ticker","add","tick","_renderPlay","_renderLineRemove","_this2","movingTetromino","tetrominoFromPull","localPositionX","Math","round","blocks","block","dispatch","filledCells","render","_canMoveVertically","_ref","addBlock","getBlock","_checkForLineBurn","_this3","_getLinesToRemove","lineIndex","clear","line","splice","unshift","apply","_toConsumableArray","idX","cell","isEmpty","moveDown","linesToRemove","lineCanBeRemoved","posX","posY","totalCols","totalRows","rotate","_canMoveHorizontally","blocksData","blockX","blockY","isForce","_checkEndRound","new_tetromino","tetro_pull_length","shift","Cell","sprite","Tetromino","type","container","tempPart","mtrx","N","temp","_canRotate","blockIndex","heightCounter","cellId","widthCounter","rowWidth","max","posCounter","min","matrix","GameFieldView","tetro_data","tetro_container","endRound","_initField","_initAnimationsControls","_initTetrominos","_initInformers","hide","states","rowsNumber","colsNumber","tetroId","tetrominoToPull","getRandomTetromino","tetro_pull","tetrominos_pull","random","isEndRound","show","GameField","controller","UserActionListener","_addKeyboardListener","document","addEventListener","event","keys","37","39","40","32","38","keyCode","Event","finish","_name","_listeners","seal","eventName","eventData","listeners","listener","cb","once","locked","_addListener","Loader","baseUrl","arguments","undefined","concurrency","_config","loaders","_get","path","crossOrigin","loader","resources","images","image","BaseTexture","_resolver","GameRunner","_respack","_modules","resolve","startLoading","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","MODULES","iterator","next","done","Module","stage","err","return","initRenderer","Promise","_startResourcesLoading","then","_startLogic","utils","skipHello","renderer","autoDetectRenderer","transparent","antialias","ticker","Ticker","getElementById","appendChild","start","customTicker","window","run"],"mappings":"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","file":"tetris.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","export default class GameFieldController {\n    /**\n     * Field class controller\n     * @param view {GameFieldView}\n     */\n    constructor(view){\n       this.view = view;\n\n       this._on();\n    }\n\n    /**\n     * Subscriptions for a global events\n     * @private\n     */\n    _on() {\n        game.EventManager.subscribe('KEY_PRESSED_DOWN', data => {\n            this._userActions(data, true);\n        });\n        game.EventManager.subscribe('KEY_PRESSED_UP', data => {\n            this._userActions(data, false);\n        });\n        game.EventManager.subscribe('AnimationControls.ADD_TETROMINO', () => {\n            this.view.checkTetraminoAdding()\n        });\n        game.EventManager.subscribe('AnimationControls.UPDATE_SCORE', () => {\n            this.view.informers.updateScore = false;\n        });\n    }\n\n\n//////////////////////////////// USER ACTIONS ////////////////////////////////\n    /**\n     * User actions analyzing\n     * @param config {Object} event data\n     * @param isDown {Boolean} is keydown pressed\n     * @private\n     */\n    _userActions(config, isDown) {\n        const data = config._data;\n        if (`${data}ActionCheck`) {\n            this[`${data}ActionCheck`](isDown);\n        } else {\n            throw new Error(`no such action: [${data}]`);\n        }\n    }\n\n    /**\n     * Left move user action listener\n     */\n    leftActionCheck() {\n        this.view.animationsControls.moveLeft();\n    }\n\n    /**\n     * Right move user action listener\n     */\n    rightActionCheck() {\n        this.view.animationsControls.moveRight();\n    }\n\n    /**\n     * Speed acceleration user action listener\n     * @param isDown {Boolean}\n     */\n    downActionCheck(isDown) {\n        this.view.animationsControls.moveDelay = isDown;\n    }\n\n    /**\n     * Rotation user action listener\n     */\n    rotateActionCheck() {\n        this.view.animationsControls.rotateTetromino()\n    }\n\n    /**\n     * Clearing of current table, starting new round\n     */\n    startNewRound() {\n        this.view.startNewRound();\n    }\n}","export default class EndRound extends PIXI.Container {\n    /**\n     * End Round screen class\n     * @param config {Object} configuration\n     * @param buttonTexture {PIXI.Texture} texture for a button background\n     * @param parent {PIXI.DisplayObject}\n     * @param callback {Function} callback for a button\n     * @constructor\n     */\n    constructor(config, buttonTexture, parent, callback) {\n        super();\n        this.config = config;\n        this._callback = callback;\n\n        this.button = null;\n\n        this._initElements(buttonTexture);\n        this.position.set(config.x, config.y);\n        parent.addChild(this);\n    }\n\n    /**\n     * Initializing of class elements - background, text label and a button\n     * @param buttonTexture {PIXI.Texture} texture for a button background\n     * @private\n     */\n    _initElements(buttonTexture) {\n        let back = new PIXI.Graphics(),\n            button = new PIXI.Sprite(buttonTexture),\n            label = new PIXI.Text(this.config['label'].text, this.config['label'].style),\n            buttonText = new PIXI.Text(this.config['button'].text, this.config['button'].style);\n\n        label.position.set(this.config['label'].x, this.config['label'].y);\n\n        back.beginFill(this.config['back'].color);\n        back.drawRect(0, 0, this.config['back'].width, this.config['back'].height);\n        back.alpha = this.config['back'].alpha;\n\n        buttonText.position.set(this.config['button']['text_offsets'].x, this.config['button']['text_offsets'].y);\n        button.addChild(buttonText);\n\n        button.position.set(this.config['button'].x, this.config['button'].y);\n        button.mouseup = this._callback;\n        this.button = button;\n\n        this.addChild(back, label, button);\n    }\n\n    /**\n     * Showing\n     */\n    show() {\n        this.button.interactive = this.button.buttonMode = true;\n        this.visible = true;\n    }\n\n    /**\n     * Hiding\n     */\n    hide() {\n        this.button.interactive = this.button.buttonMode = false;\n        this.visible = false;\n    }\n}","export default class Informers {\n    /**\n     * Next data and score informers\n     * @constructor\n     * @param data {Object}\n     * * tetro_pull {Array} Array of generated tetrominos\n     * * config {Object} common config\n     * * parent {PIXI.DisplayObject}\n     * * respack {Object} resources\n     */\n    constructor(data) {\n        this._data = data;\n        this.respack = data.respack;\n        this.config = data.config;\n        this._score = 0;\n\n        this.nextContainer = new PIXI.Container();\n        this.scoreContainer = new PIXI.Container();\n        this._scoreText = null;\n\n        this._tempTetraminos = [];\n\n        this._initNextData();\n        this._initScoreField();\n    }\n\n//////////////////////////////// INITIALIZING ////////////////////////////////\n    /**\n     * Initializing of next container elements\n     * @private\n     */\n    _initNextData() {\n        const init_tetro_pull = this._data['tetro_pull'],\n            position = this.config['next_position'];\n        this.nextContainer.position.set(position.x, position.y);\n        this.updateNextTetrominos = init_tetro_pull;\n        this._data.parent.addChild(this.nextContainer);\n    }\n\n    /**\n     * Initializing of score container text label\n     * @private\n     */\n    _initScoreField() {\n        this._scoreText = new PIXI.Text('' + this._score, this.config['score']['style']);\n        this.scoreContainer.addChild(this._scoreText);\n        this._scoreText.anchor.set(.5, .5);\n        this.scoreContainer.position.set(this.config['score'].x, this.config['score'].y);\n\n        this._data.parent.addChild(this.scoreContainer);\n    }\n\n    /**\n     * Generating of a new tetromonis pull\n     * @param tetroPull {Array} Array of generated tetrominos\n     * @private\n     */\n    _generateTetrominos(tetroPull) {\n        if (this._tempTetraminos.length > 0) {\n            this._tempTetraminos.forEach(tetramino => {\n                tetramino.parent.removeChild(tetramino);\n            });\n            this._tempTetraminos.length = 0;\n        }\n\n        for (let tetroIdx = 0; tetroIdx < tetroPull.length; tetroIdx++) {\n            let tempConfig = tetroPull[tetroIdx].config,\n                tempBlock,\n                tempTetromino = new PIXI.Sprite(PIXI.Texture.EMPTY);\n\n            tempConfig['mtrx'].forEach((row, rowId) => {\n                row.forEach((column, colId) => {\n                    if (column === 1) {\n                        tempBlock = new PIXI.Sprite(this.respack[[`block_${tempConfig.color}`]]);\n                        tempBlock.x = colId * this.config['cell'].width;\n                        tempBlock.y = rowId * this.config['cell'].height;\n                        tempTetromino.addChild(tempBlock);\n                    }\n                })\n            });\n            this.nextContainer.addChild(tempTetromino);\n            tempTetromino.y = this.config['next_position']['offsets_y'][tetroIdx];\n            if (tempConfig.color === 'violet') {\n                tempTetromino.x += this.config['cell'].width / 2;\n            }\n            this._tempTetraminos.push(tempTetromino);\n        }\n    }\n\n//////////////////////////////// GETTERS | SETTERS ////////////////////////////////\n    /**\n     * updating next tetrominos section\n     * @param tetroPull {Array} Array of generated tetrominos\n     */\n    set updateNextTetrominos(tetroPull) {\n        this._generateTetrominos(tetroPull);\n    }\n\n    /**\n     * updating score section\n     * @param isClear {Boolean}\n     */\n    set updateScore(isClear) {\n        isClear ? this._score = 0 : this._score += 10;\n        this._scoreText.text = '' + this._score;\n    }\n}","export default class StateController {\n    /**\n     * State controller class\n     * @param statesArray {Array} array of allowed states\n     */\n    constructor(statesArray) {\n        this._currentState = null;\n        this.legalStates = statesArray;\n    }\n\n    /**\n     * getting of a current game state\n     * @return {String}\n     */\n    get currentState() {\n        return this._currentState;\n    }\n\n    /**\n     * Setting of a current state\n     * @param name {String}\n     */\n    set currentState(name) {\n        if (this.legalStates.indexOf(name) !== -1) {\n            this._currentState = name;\n            console.info(`state setted to [${name}]`);\n        } else {\n            throw new Error(`game state [${name}] is not legal!`);\n        }\n    }\n}","import StateController from './StateController';\n\nexport default class AnimationsControls {\n    /**\n     * Field animations controls class\n     * @param data {Object}\n     * * states {Array} allowed game states pull\n     * * rowsNumber {Number} total rows\n     * * colsNumber {Number} total columns\n     * * moveDelay {Number} delay between fall render\n     * * tetro_pull_length {Number} number of next symbols\n     * * cell {Object} single cell config\n     * @param configuration\n     * * cells {Array }link to global table matrix\n     * @constructor\n     */\n    constructor(data, configuration) {\n        this.stateController = new StateController(data['states']);\n        this.stateController.currentState = 'play';\n        this.config = data;\n        this._cells = configuration.cells;\n        this._tetroPull = [];\n        this.currentPositionX = 0;\n        this.currentPositionY = 0;\n        this.currentTime = 0;\n        this._movingShape = null;\n        this._moveDelay = data['moveDelay'];\n        this.isGameOver = false;\n        game._ticker.add(() => {\n            this.tick()\n        });\n    }\n\n////////////////////// RENDERING //////////////////////\n    /**\n     * Render method\n     */\n    tick() {\n        this.currentTime++;\n        switch (this.stateController.currentState) {\n            case 'play' :\n                this._renderPlay();\n                break;\n            case 'remove' :\n                this._renderLineRemove();\n                break;\n        }\n    }\n\n    /**\n     * Rendering moving down animation\n     * @private\n     */\n    _renderPlay() {\n        if (!this.movingTetromino) {\n            this.movingTetromino = this.tetrominoFromPull;\n            this.currentPositionX = (this.config['colsNumber'] / 2) -\n                this.movingTetromino.localPositionX - Math.round(this.movingTetromino.width / 2);\n\n            this.currentPositionY = 0;\n            this.movingTetromino.blocks.forEach(block => {\n                block.visible = true;\n            });\n            game.EventManager.dispatch('AnimationControls.ADD_TETROMINO');\n        }\n\n        if (this.isGameOver) {\n            this.stateController.currentState = 'game_over';\n            return;\n        }\n\n        const filledCells = this.movingTetromino.render(this.currentPositionX, this.currentPositionY, this.config['cell']);\n        if (this.currentTime >= this.moveDelay) {\n            const verticalMoveAllowed = this._canMoveVertically(this.currentPositionY + 1);\n            if (verticalMoveAllowed) {\n                this.currentPositionY++;\n            } else {\n                filledCells.forEach(({x, y}) => {\n                    this._cells[y][x].addBlock(this.movingTetromino.getBlock());\n                });\n                this._checkForLineBurn();\n                this.movingTetromino = null;\n            }\n            this.currentTime = 0;\n        }\n    }\n\n    /**\n     * Rendering line burning animation\n     * @private\n     */\n    _renderLineRemove() {\n        const linesToRemove = this._getLinesToRemove();\n\n        linesToRemove.forEach(lineIndex => {\n            this._cells[lineIndex].forEach(block => {\n                block.clear();\n            });\n            let line = this._cells.splice(lineIndex, 1);\n            this._cells.unshift(...line);\n            this._cells.forEach((row, idX) => {\n                if (idX <= lineIndex) {\n                    row.forEach(cell => {\n                        if (!cell.isEmpty) {\n                            cell.moveDown();\n                        }\n                    })\n                }\n            });\n            game.EventManager.dispatch('AnimationControls.UPDATE_SCORE');\n        });\n\n        this.stateController.currentState = 'play';\n    }\n\n////////////////////// CALCULATIONS //////////////////////\n    /**\n     * Check for state update\n     * @private\n     */\n    _checkForLineBurn() {\n        if (this._getLinesToRemove().length > 0) {\n            this.stateController.currentState = 'remove';\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Calculating lines to burn\n     * @return {Array}\n     * @private\n     */\n    _getLinesToRemove() {\n        const linesToRemove = [];\n        for (let rowId = 0; rowId < this._cells.length; rowId++) {\n            let lineCanBeRemoved = true;\n            for (let colId = 0; colId < this._cells[rowId].length; colId++) {\n                if (this._cells[rowId][colId].isEmpty) {\n                    lineCanBeRemoved = false;\n                }\n            }\n            if (lineCanBeRemoved) {\n                linesToRemove.push(rowId);\n            }\n        }\n        return linesToRemove;\n    }\n\n    /**\n     * Rotating tetramino\n     */\n    rotateTetromino() {\n        if (!this.movingTetromino) {\n            return;\n        }\n        let config = {\n            posX: this.currentPositionX,\n            posY: this.currentPositionY,\n            cells: this._cells,\n            totalCols: this.config['colsNumber'],\n            totalRows: this.config['rowsNumber']\n        };\n\n        this.movingTetromino.rotate(config);\n    }\n\n    /**\n     * Move current tetromino left\n     */\n    moveLeft() {\n        if (!this.movingTetromino) {\n            return;\n        }\n        if (this.currentPositionY + this.movingTetromino.height <= 3) {\n            return;\n        }\n        this.currentPositionX = this._canMoveHorizontally(this.currentPositionX - 1) ?\n            this.currentPositionX - 1 : this.currentPositionX;\n    }\n\n    /**\n     * Move current tetromino right\n     */\n    moveRight() {\n        if (!this.movingTetromino) {\n            return;\n        }\n        if (this.currentPositionY + this.movingTetromino.height <= 3) {\n            return;\n        }\n        this.currentPositionX = this._canMoveHorizontally(this.currentPositionX + 1) ?\n            this.currentPositionX + 1 : this.currentPositionX;\n    }\n\n////////////////////// COLLISIONS //////////////////////\n    /**\n     * Vertical collision detection\n     * @collision\n     * @param y {Number}\n     * @return {boolean}\n     */\n    _canMoveVertically(y) {\n        for (let rowId = 0; rowId < this.movingTetromino.blocksData.length; rowId++) {\n            for (let colId = 0; colId < this.movingTetromino.blocksData[rowId].length; colId++) {\n                if (this.movingTetromino.blocksData[rowId][colId] === 0) continue;\n                const blockX = this.currentPositionX + colId;\n                const blockY = y + rowId;\n                if (blockY >= this.config['rowsNumber']) {\n                    return false;\n                }\n                if (!this._cells[blockY][blockX] || !this._cells[blockY][blockX].isEmpty) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Horizontal collision detection\n     * @param x\n     * @return {boolean}\n     */\n    _canMoveHorizontally(x) {\n        for (let rowId = 0; rowId < this.movingTetromino.blocksData.length; rowId++) {\n            for (let colId = 0; colId < this.movingTetromino.blocksData[rowId].length; colId++) {\n                if (this.movingTetromino.blocksData[rowId][colId] === 0) continue;\n\n                const blockX = x + colId;\n                const blockY = this.currentPositionY + rowId;\n\n                if (blockX < 0 || blockX >= this.config['colsNumber']) {\n                    return false;\n                }\n                if (!this._cells[blockY][blockX] || !this._cells[blockY][blockX].isEmpty) {\n                    return false;\n                }\n\n            }\n        }\n        return true;\n    }\n\n//////////////////////////////// GETTERS | SETTERS ////////////////////////////////\n    get moveDelay() {\n        return this._moveDelay;\n    }\n\n    set moveDelay(isForce) {\n        this._moveDelay = isForce ? this.config['moveDelay'] / 30 : this.config['moveDelay'];\n    }\n\n    get tetrominoFromPull() {\n        return this._tetroPull[0];\n    }\n\n    get movingTetromino() {\n        return this._movingShape;\n    }\n\n    set movingTetromino(data) {\n        this._movingShape = data;\n    }\n\n    get isEndRound() {\n        this.isGameOver = this._checkEndRound();\n        return this.isGameOver;\n    }\n\n    get tetrominos_pull() {\n        return this._tetroPull;\n    }\n\n    set tetrominoToPull(new_tetromino) {\n        this._tetroPull.push(new_tetromino);\n        if (this._tetroPull.length > this.config.tetro_pull_length) {\n            this._tetroPull.shift();\n        }\n    }\n\n    /**\n     * Checking for end of a game round\n     * @return {boolean}\n     * @private\n     */\n    _checkEndRound() {\n        return (this.currentPositionY < 3 && !this._canMoveVertically(this.currentPositionY));\n    }\n\n    /**\n     * Clearing and starting a new round\n     */\n    startNewRound() {\n        this.isGameOver = false;\n        this.currentTime = 0;\n        this.movingTetromino = null;\n        this.stateController.currentState = 'play';\n    }\n}","export default class Cell {\n    /**\n     * Single cell class\n     * @constructor\n     */\n    constructor() {\n        this.sprite = null;\n    }\n\n    /**\n     * is cell filled with an image\n     * @return {boolean}\n     */\n    get isEmpty() {\n        return this.sprite === null;\n    }\n\n    /**\n     * fill cell with an image\n     * @param sprite\n     */\n    addBlock(sprite) {\n        this.sprite = sprite;\n    }\n\n    /**\n     * removing image\n     */\n    clear() {\n        this.sprite.parent.removeChild(this.sprite);\n        this.sprite = null;\n    }\n\n    /**\n     * update cell's vertical position\n     */\n    moveDown() {\n        this.sprite.y += this.sprite.height;\n    }\n\n}","export default class Tetromino {\n    /**\n     * @constructor\n     * @param respack {Object} resources pack\n     * @param parent {PIXI.DisplayObject}\n     * @param configuration {Object}\n     * * mtrx {Array} Tetromino matrix array\n     * * color {String} color of a tetramino\n     */\n    constructor(respack, parent, configuration) {\n        this.type = null;\n        this.config = configuration;\n        this.blocksData = configuration['mtrx'];\n        this.blocks = [];\n        this.container = parent;\n        this._initElements(respack);\n    }\n\n    /**\n     * Creating a PIXI.DisplayObject from a matrix array\n     * @private\n     */\n    _initElements(respack) {\n        let tempPart;\n\n        for (let rowId = 0; rowId < this.blocksData.length; rowId++) {\n            for (let colId = 0; colId < this.blocksData[rowId].length; colId++) {\n                if (this.blocksData[rowId][colId] > 0) {\n                    tempPart = new PIXI.Sprite(respack[`block_${this.config.color}`]);\n                    tempPart.visible = false;\n                    this.blocks.push(this.container.addChild(tempPart));\n                }\n            }\n        }\n    }\n\n    /**\n     * returns blocks data\n     * @return {*}\n     */\n    getBlock() {\n        return this.blocks.shift();\n    }\n\n    /**\n     * Calculating new matrix for a current tetromino\n     * @param config\n     */\n    rotate(config) {\n        let {posX, posY, cells, totalCols, totalRows} = config;\n        if (posY + this.height <= 3) {\n            return;\n        }\n\n        let mtrx = [];\n        for (let rowId = 0; rowId < this.blocksData.length; rowId++) {\n            mtrx[rowId] = [];\n            for (let colId = 0; colId < this.blocksData[rowId].length; colId++) {\n                mtrx[rowId][colId] = this.blocksData[rowId][colId];\n            }\n        }\n\n        let N = mtrx.length;\n        for (let x = 0; x < N / 2; x++) {\n            for (let y = x; y < N - x - 1; y++) {\n                let temp = mtrx[x][y];\n                mtrx[x][y] = mtrx[y][N - 1 - x];\n                mtrx[y][N - 1 - x] = mtrx[N - 1 - x][N - 1 - y];\n                mtrx[N - 1 - x][N - 1 - y] = mtrx[N - 1 - y][x];\n                mtrx[N - 1 - y][x] = temp;\n            }\n        }\n\n        if (Tetromino._canRotate(posX, posY, cells, totalCols, totalRows, mtrx)) {\n            this.blocksData = mtrx;\n        }\n    }\n\n    /**\n     * Borders collisions detection\n     * @param posX\n     * @param posY\n     * @param cells\n     * @param matrix\n     * @param totalCols\n     * @param totalRows\n     * @return {boolean}\n     * @static\n     * @private\n     */\n    static _canRotate(posX, posY, cells, totalCols, totalRows, matrix) {\n        for (let rowId = 0; rowId < matrix.length; rowId++) {\n            for (let colId = 0; colId < matrix[rowId].length; colId++) {\n                if (matrix[rowId][colId] === 0) {\n                    continue;\n                }\n\n                const blockX = posX + colId;\n                const blockY = posY + rowId;\n\n                if (blockX < 0 || blockX > totalCols || blockY >= totalRows) {\n                    return false;\n                }\n                if (!cells[blockY][blockX] || !cells[blockY][blockX].isEmpty) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Calculating of a current tetromino position for a next tick\n     * @param posX\n     * @param posY\n     * @param config\n     * @return {Array} new position matrix\n     */\n    render(posX, posY, config) {\n        let filledCells = []; //{x, y}\n        let blockIndex = 0;\n\n        for (let rowId = 0; rowId < this.blocksData.length; rowId++) {\n            for (let colId = 0; colId < this.blocksData[rowId].length; colId++) {\n                if (this.blocksData[rowId][colId] > 0) {\n                    const block = this.blocks[blockIndex];\n                    const blockX = posX + colId;\n                    const blockY = posY + rowId;\n\n                    block.x = (blockX * config.width);\n                    block.y = (blockY * config.height);\n                    block.width = config.width;\n                    block.height = config.height;\n\n                    filledCells.push({x: blockX, y: blockY});\n                    blockIndex++;\n                }\n            }\n        }\n        return filledCells;\n    }\n\n    /**\n     * Calculating of blocks height number\n     * @return {number}\n     */\n    get height() {\n        let heightCounter = 0;\n\n        this.blocksData.forEach(row => {\n            for (let cellId = 0; cellId < row.length; cellId++) {\n                if (row[cellId] > 0) {\n                    heightCounter++;\n                    break;\n                }\n            }\n        });\n\n        return heightCounter;\n    }\n\n    /**\n     * Calculating of blocks width number\n     * @return {number}\n     */\n    get width() {\n        let widthCounter = 0;\n\n        this.blocksData.forEach(row => {\n            let rowWidth = 0;\n            for (let cellId = 0; cellId < row.length; cellId++) {\n                if (row[cellId] > 0) {\n                    rowWidth++;\n                }\n\n            }\n            widthCounter = Math.max(widthCounter, rowWidth);\n        });\n\n        return widthCounter;\n    }\n\n    /**\n     * Calculating of matrix first block index\n     * @return {*}\n     */\n    get localPositionX() {\n        let posCounter = this.blocksData[0].length;\n\n        this.blocksData.forEach(row => {\n            if (row.indexOf(1) === -1) {\n                return;\n            }\n            posCounter = Math.min(row.indexOf(1), posCounter);\n        });\n\n        return posCounter;\n    }\n\n}","import Tetromino from '../Tetromino';\nimport Cell from \"../Cell\";\nimport AnimationsControls from '../AnimationsControls';\nimport Informers from '../Informers';\nimport EndRound from '../EndRound';\n\nimport config from '../../configurations/field_config';\nimport tetro_data from '../../configurations/tetro_data';\n\n\nexport default class GameFieldView extends PIXI.Container{\n    /**\n     * Field class view\n     * @constructor\n     * @param respack {Object} resources pack\n     * @param parent {PIXI.DisplayObject}\n     */\n    constructor(respack, parent) {\n        super();\n        parent.addChild(this);\n        this.respack = respack;\n\n        this.cells = [];\n        this.tetro_data = tetro_data;\n        this.tetro_container = null;\n        this.animationsControls = null;\n        this.endRound = null;\n        this.informers = null;\n\n        this._initElements();\n        this._initField();\n        this._initAnimationsControls();\n        this._initTetrominos();\n        this._initInformers();\n    }\n\n//////////////////////////////// INITIALIZING ////////////////////////////////\n    /**\n     * Initializing of background and PIXI.Container for a tetrominos\n     * @private\n     */\n    _initElements() {\n        let back = new PIXI.Sprite(this.respack['field_back']);\n        back.position.set(config['back_position'].x, config['back_position'].y);\n        this.addChild(back);\n        this.tetro_container = new PIXI.Container();\n        this.addChild(this.tetro_container);\n        this.tetro_container.position.set(config['tetro_position'].x, config['tetro_position'].y);\n        this.endRound = new EndRound(config['end_round'], this.respack['end_button'], this, () => {\n            this.startNewRound();\n        });\n        this.endRound.hide();\n    }\n\n    /**\n     * Initializing matrix array of a field\n     * @private\n     */\n    _initField() {\n        for (let rowId = 0; rowId < config['rowsNumber']; rowId++) {\n            this.cells[rowId] = [];\n            for (let colId = 0; colId < config['colsNumber']; colId++) {\n                this.cells[rowId][colId] = new Cell();\n            }\n        }\n    }\n\n    /**\n     * Initializing controls for animations\n     * @private\n     */\n    _initAnimationsControls() {\n        const data = {\n                states: config['states'],\n                rowsNumber: config['rowsNumber'],\n                colsNumber: config['colsNumber'],\n                moveDelay: config['moveDelay'],\n                tetro_pull_length: config.tetro_pull_length,\n                cell: config['cell']\n            },\n            configuration = {\n                cells: this.cells\n            };\n\n        this.animationsControls = new AnimationsControls(data, configuration);\n    }\n\n    /**\n     * Initializing of tetrominos pull\n     * @private\n     */\n    _initTetrominos() {\n        for (let tetroId = 0; tetroId < config['tetro_pull_length']; tetroId++) {\n            this.animationsControls.tetrominoToPull = this.getRandomTetromino();\n        }\n    }\n\n    /**\n     * Initializing of game informers (next, score)\n     * @private\n     */\n    _initInformers() {\n        const data = {\n            tetro_pull: this.animationsControls.tetrominos_pull,\n            config,\n            parent: this,\n            respack: this.respack\n        };\n\n        this.informers = new Informers(data);\n    }\n\n    /**\n     * Generates instance of a random Tetromino class\n     * @return {Tetromino}\n     */\n    getRandomTetromino() {\n        return new Tetromino(this.respack, this.tetro_container, this.tetro_data[Math.round(Math.random() * (this.tetro_data.length - 1))]);\n    }\n\n    /**\n     * Checking for end of a game round and adding a new tetramino to the pull\n     */\n    checkTetraminoAdding(){\n        if (!this.animationsControls.isEndRound) {\n            this.animationsControls.tetrominoToPull = this.getRandomTetromino();\n            this.informers.updateNextTetrominos = this.animationsControls.tetrominos_pull;\n        } else {\n            this.endRound.show();\n        }\n    }\n\n    /**\n     * Clearing of current table, starting new round\n     */\n    startNewRound() {\n        this.cells.forEach(row => {\n            row.forEach(cell => {\n                if (!cell.isEmpty) {\n                    cell.clear();\n                }\n            })\n        });\n        this._initTetrominos();\n        this.informers.updateScore = true;\n        this.informers.updateNextTetrominos = this.animationsControls.tetrominos_pull;\n        this.animationsControls.startNewRound();\n        this.endRound.hide();\n    }\n}","import GameFieldView from './GameFieldView';\nimport GameFieldController from './GameFieldController';\n\nexport default class GameField {\n    /**\n     * Game Field class\n     * @param respack {Object} resources pack\n     * @param parent {PIXI.DisplayObject}\n     */\n    constructor(respack, parent){\n        this.view =       new GameFieldView(respack, parent);\n        this.controller = new GameFieldController(this.view);\n    }\n}","export default class UserActionListener {\n    constructor() {\n        this._addKeyboardListener();\n    }\n\n    _addKeyboardListener() {\n        const onKeyDown = event => {\n            const keys = {\n                37: 'left',\n                39: 'right',\n                40: 'down',\n                32: 'down',\n                38: 'rotate'\n            };\n            if (typeof(keys[event.keyCode]) != 'undefined') {\n                game.EventManager.dispatch('KEY_PRESSED_DOWN', keys[event.keyCode]);\n            }\n        };\n\n        const onKeyUp = event => {\n            const keys = {\n                40: 'down',\n                32: 'down'\n            };\n            if (typeof(keys[event.keyCode]) != 'undefined') {\n                game.EventManager.dispatch('KEY_PRESSED_UP', keys[event.keyCode]);\n            }\n        };\n\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('keyup', onKeyUp);\n    }\n}","function Listener(cb, once) {\n    this.cb = cb;\n    this.once = once || false;\n}\n\nclass Event {\n    /**\n     * @constructor\n     * @param name {String}\n     * @param data {Object} parameters\n     * @param finish {Function}\n     */\n    constructor(name, data, finish) {\n        this._name = name;\n        this._data = data;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport default class EventManager {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this._listeners = {};\n\n        Object.seal(this);\n    }\n\n    /**\n     * Fires event\n     * @param eventName {String}\n     * @param eventData {Object}\n     * @param finish\n     */\n    dispatch(eventName, eventData, finish) {\n        let listeners = this._listeners[eventName];\n        if (listeners) {\n            let event = new Event(eventName, eventData, finish);\n\n            let i = 0;\n            while (i < listeners.length) {\n                let listener = listeners[i];\n                listener.cb(event);\n                if (listener.once) {\n                    listeners.splice(i, 1);\n                } else {\n                    ++i;\n                }\n            }\n\n            if (!event.locked) {\n                if (finish) finish();\n            }\n        } else {\n            if (finish) finish();\n        }\n    }\n\n    /**\n     * Subscribes on event\n     * @param eventName {String}\n     * @param cb {Function} callback\n     */\n    subscribe(eventName, cb) {\n        this._addListener(eventName, new Listener(cb));\n    }\n\n    /**\n     * Adding of a listener\n     * @param eventName\n     * @param listener\n     * @private\n     */\n    _addListener(eventName, listener) {\n        if (this._listeners[eventName]) {\n            this._listeners[eventName].push(listener);\n        } else {\n            this._listeners[eventName] = [listener];\n        }\n    }\n}\n","export default class Loader extends PIXI.loaders.Loader{\n    /**\n     * Override for a PIXI loader\n     * @constructor\n     * @param baseUrl\n     * @param concurrency\n     * @param config\n     */\n    constructor(config, baseUrl = '', concurrency = 20) {\n        super(baseUrl, concurrency);\n        this._config = config;\n    }\n\n    /**\n     * adding and starting loading of resources\n     * @param cb {Function} resolver\n     */\n    startLoading(cb){\n        for(let i = 0; i < this._config.length; i++){\n            super.add(this._config[i].name, this._config[i].path, { crossOrigin: true })\n        }\n        super.load((loader, resources)=>{\n            let images = {};\n            for (let image in resources) {\n                images[image] = new PIXI.Texture(new PIXI.BaseTexture(resources[image].data));\n            }\n            this._resolver(images);\n        });\n        this._resolver = cb;\n    }\n}","import Loader from \"./Loader\";\n\nexport default class GameRunner {\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor(config) {\n        this.config = config;\n        this._respack = null;\n        this._modules = {};\n    }\n\n    /**\n     * Loads all resources, makes PIXI.Sprite-s\n     * @param resolve {Function} resolver\n     * @private\n     */\n    _startResourcesLoading(resolve) {\n        this.loader = new Loader(this.config['images']);\n        this.loader.startLoading(resolve);\n    }\n\n    /**\n     * Start game logic, loads all components\n     * @private\n     */\n    _startLogic() {\n        console.info(`[${game.config.name}]: Logic started`);\n        //Initializing of modules\n        for (let Module of game.MODULES) {\n            this._modules[Module.name] = new Module(this._respack, this.stage);\n            console.info(`Module ${Module.name} was attached`);\n        }\n    }\n\n    /**\n     * Entry point\n     */\n    run() {\n        this.initRenderer('container', game.config.width, game.config.height);\n        new Promise(resolve => {\n            this._startResourcesLoading(resolve);\n        }).then((resources) => {\n            this._respack = resources;\n            this._startLogic();\n        })\n    }\n\n    /**\n     * Creates PIXI renderer and start frames ticker\n     * @param parent {String} parent node id for a PIXI stage\n     * @param width {Number} width of a stage\n     * @param height {Number} height of a stage\n     */\n    initRenderer(parent = 'container', width = 640, height = 640) {\n        PIXI.utils.skipHello();\n        let renderer = PIXI.autoDetectRenderer({\n                width, height,\n                transparent: true,\n                antialias: true\n            }, false),\n            stage = new PIXI.Container(),\n\n            ticker = new PIXI.ticker.Ticker();\n        document.getElementById(parent).appendChild(renderer.view);\n        ticker.add(() => {\n            renderer.render(stage);\n        });\n        ticker.start();\n        this.stage = stage;\n        this.ticker = game._ticker = ticker;\n        PIXI.customTicker = ticker;\n    }\n}","////////// CONFIGS //////////\nimport resources from './configurations/resources'  ;\nimport config    from './configurations/main_config';\n\n////////// CORE //////////\nimport GameRunner           from './core/GameRunner'        ;\nimport EventManager         from './core/EventManager'      ;\nimport UserActionListener   from './core/UserActionListener';\n\n////////// GLOBAL //////////\nlet game = {\n    config,\n    EventManager:  new EventManager(),\n    UserActionListener: new UserActionListener()\n};\n\n////////// MODULES //////////\nimport GameField from './game/GameField/GameFieldAPI';\ngame.MODULES = [GameField];\n\nwindow.game = game;\n\n////////// GAME RUN //////////\nconst gameRunner = new GameRunner(resources);\ngameRunner.run();\n"],"sourceRoot":""}